{"ast":null,"code":"const EVENT_TYPE = 'contextmenu';\nexport default class ContextmenuInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n\n    this.callback({\n      type: EVENT_TYPE,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/inputs/contextmenu-input.js"],"names":["EVENT_TYPE","constructor","options","enable","element","destroy","enableEventType","eventType","handleEvent","type","center","x","event","y","clientY","srcEvent","pointerType","target"],"mappings":"AAoBA,MAAMA,UAAU,GAAhB,aAAA;AAEA,eAAe,MAAA,gBAAA,CAAuB;AACpCC,EAAAA,WAAW,CAAA,OAAA,EAAA,QAAA,EAAoBC,OAAO,GAA3B,EAAA,EAAkC;AAC3C,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,OAAA,GAAe,MAAM,CAAN,MAAA,CAAc;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAd,EAAf,OAAe,CAAf;AAEA,SAAA,WAAA,GAAmB,KAAA,WAAA,CAAA,IAAA,CAAnB,IAAmB,CAAnB;AACAC,IAAAA,OAAO,CAAPA,gBAAAA,CAAAA,aAAAA,EAAwC,KAAxCA,WAAAA;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,SAAA,OAAA,CAAA,mBAAA,CAAA,aAAA,EAAgD,KAAhD,WAAA;AACD;;AAMDC,EAAAA,eAAe,CAAA,SAAA,EAAA,OAAA,EAAqB;AAClC,QAAIC,SAAS,KAAb,UAAA,EAA8B;AAC5B,WAAA,OAAA,CAAA,MAAA,GAAA,OAAA;AACD;AACF;;AAEDC,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB,QAAI,CAAC,KAAA,OAAA,CAAL,MAAA,EAA0B;AACxB;AACD;;AAED,SAAA,QAAA,CAAc;AACZC,MAAAA,IAAI,EADQ,UAAA;AAEZC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAEC,KAAK,CADF,OAAA;AAENC,QAAAA,CAAC,EAAED,KAAK,CAACE;AAFH,OAFI;AAMZC,MAAAA,QAAQ,EANI,KAAA;AAOZC,MAAAA,WAAW,EAPC,OAAA;AAQZC,MAAAA,MAAM,EAAEL,KAAK,CAACK;AARF,KAAd;AAUD;;AAxCmC","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst EVENT_TYPE = 'contextmenu';\n\nexport default class ContextmenuInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n\n    this.options = Object.assign({enable: true}, options);\n\n    this.handleEvent = this.handleEvent.bind(this);\n    element.addEventListener('contextmenu', this.handleEvent);\n  }\n\n  destroy() {\n    this.element.removeEventListener('contextmenu', this.handleEvent);\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === EVENT_TYPE) {\n      this.options.enable = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    if (!this.options.enable) {\n      return;\n    }\n\n    this.callback({\n      type: EVENT_TYPE,\n      center: {\n        x: event.clientX,\n        y: event.clientY\n      },\n      srcEvent: event,\n      pointerType: 'mouse',\n      target: event.target\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}