{"ast":null,"code":"import { INPUT_EVENT_TYPES } from '../constants';\nconst {\n  KEY_EVENTS\n} = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\nexport default class KeyInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n    this.options = Object.assign({\n      enable: true\n    }, options);\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n    this.events = KEY_EVENTS.concat(options.events || []);\n    this.handleEvent = this.handleEvent.bind(this);\n    element.tabIndex = options.tabIndex || 0;\n    element.style.outline = 'none';\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  enableEventType(eventType, enabled) {\n    if (eventType === DOWN_EVENT_TYPE) {\n      this.enableDownEvent = enabled;\n    }\n\n    if (eventType === UP_EVENT_TYPE) {\n      this.enableUpEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    const targetElement = event.target || event.srcElement;\n\n    if (targetElement.tagName === 'INPUT' && targetElement.type === 'text' || targetElement.tagName === 'TEXTAREA') {\n      return;\n    }\n\n    if (this.enableDownEvent && event.type === 'keydown') {\n      this.callback({\n        type: DOWN_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n\n    if (this.enableUpEvent && event.type === 'keyup') {\n      this.callback({\n        type: UP_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/inputs/key-input.js"],"names":["KEY_EVENTS","DOWN_EVENT_TYPE","UP_EVENT_TYPE","constructor","options","enable","element","event","destroy","enableEventType","eventType","handleEvent","targetElement","type","srcEvent","key","target"],"mappings":"AAoBA,SAAA,iBAAA,QAAA,cAAA;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAN,iBAAA;AACA,MAAMC,eAAe,GAArB,SAAA;AACA,MAAMC,aAAa,GAAnB,OAAA;AAEA,eAAe,MAAA,QAAA,CAAe;AAC5BC,EAAAA,WAAW,CAAA,OAAA,EAAA,QAAA,EAAoBC,OAAO,GAA3B,EAAA,EAAkC;AAC3C,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,QAAA;AAEA,SAAA,OAAA,GAAe,MAAM,CAAN,MAAA,CAAc;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAd,EAAf,OAAe,CAAf;AACA,SAAA,eAAA,GAAuB,KAAA,OAAA,CAAvB,MAAA;AACA,SAAA,aAAA,GAAqB,KAAA,OAAA,CAArB,MAAA;AAEA,SAAA,MAAA,GAAcL,UAAU,CAAVA,MAAAA,CAAkBI,OAAO,CAAPA,MAAAA,IAAhC,EAAcJ,CAAd;AAEA,SAAA,WAAA,GAAmB,KAAA,WAAA,CAAA,IAAA,CAAnB,IAAmB,CAAnB;AAEAM,IAAAA,OAAO,CAAPA,QAAAA,GAAmBF,OAAO,CAAPA,QAAAA,IAAnBE,CAAAA;AACAA,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,OAAAA,GAAAA,MAAAA;AACA,SAAA,MAAA,CAAA,OAAA,CAAoBC,KAAK,IAAID,OAAO,CAAPA,gBAAAA,CAAAA,KAAAA,EAAgC,KAA7D,WAA6BA,CAA7B;AACD;;AAEDE,EAAAA,OAAO,GAAG;AACR,SAAA,MAAA,CAAA,OAAA,CAAoBD,KAAK,IAAI,KAAA,OAAA,CAAA,mBAAA,CAAA,KAAA,EAAwC,KAArE,WAA6B,CAA7B;AACD;;AAMDE,EAAAA,eAAe,CAAA,SAAA,EAAA,OAAA,EAAqB;AAClC,QAAIC,SAAS,KAAb,eAAA,EAAmC;AACjC,WAAA,eAAA,GAAA,OAAA;AACD;;AACD,QAAIA,SAAS,KAAb,aAAA,EAAiC;AAC/B,WAAA,aAAA,GAAA,OAAA;AACD;AACF;;AAEDC,EAAAA,WAAW,CAAA,KAAA,EAAQ;AAEjB,UAAMC,aAAa,GAAGL,KAAK,CAALA,MAAAA,IAAgBA,KAAK,CAA3C,UAAA;;AACA,QACGK,aAAa,CAAbA,OAAAA,KAAAA,OAAAA,IAAqCA,aAAa,CAAbA,IAAAA,KAAtC,MAACA,IACDA,aAAa,CAAbA,OAAAA,KAFF,UAAA,EAGE;AACA;AACD;;AAED,QAAI,KAAA,eAAA,IAAwBL,KAAK,CAALA,IAAAA,KAA5B,SAAA,EAAsD;AACpD,WAAA,QAAA,CAAc;AACZM,QAAAA,IAAI,EADQ,eAAA;AAEZC,QAAAA,QAAQ,EAFI,KAAA;AAGZC,QAAAA,GAAG,EAAER,KAAK,CAHE,GAAA;AAIZS,QAAAA,MAAM,EAAET,KAAK,CAACS;AAJF,OAAd;AAMD;;AAED,QAAI,KAAA,aAAA,IAAsBT,KAAK,CAALA,IAAAA,KAA1B,OAAA,EAAkD;AAChD,WAAA,QAAA,CAAc;AACZM,QAAAA,IAAI,EADQ,aAAA;AAEZC,QAAAA,QAAQ,EAFI,KAAA;AAGZC,QAAAA,GAAG,EAAER,KAAK,CAHE,GAAA;AAIZS,QAAAA,MAAM,EAAET,KAAK,CAACS;AAJF,OAAd;AAMD;AACF;;AA9D2B","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {INPUT_EVENT_TYPES} from '../constants';\n\nconst {KEY_EVENTS} = INPUT_EVENT_TYPES;\nconst DOWN_EVENT_TYPE = 'keydown';\nconst UP_EVENT_TYPE = 'keyup';\n\nexport default class KeyInput {\n  constructor(element, callback, options = {}) {\n    this.element = element;\n    this.callback = callback;\n\n    this.options = Object.assign({enable: true}, options);\n    this.enableDownEvent = this.options.enable;\n    this.enableUpEvent = this.options.enable;\n\n    this.events = KEY_EVENTS.concat(options.events || []);\n\n    this.handleEvent = this.handleEvent.bind(this);\n\n    element.tabIndex = options.tabIndex || 0;\n    element.style.outline = 'none';\n    this.events.forEach(event => element.addEventListener(event, this.handleEvent));\n  }\n\n  destroy() {\n    this.events.forEach(event => this.element.removeEventListener(event, this.handleEvent));\n  }\n\n  /**\n   * Enable this input (begin processing events)\n   * if the specified event type is among those handled by this input.\n   */\n  enableEventType(eventType, enabled) {\n    if (eventType === DOWN_EVENT_TYPE) {\n      this.enableDownEvent = enabled;\n    }\n    if (eventType === UP_EVENT_TYPE) {\n      this.enableUpEvent = enabled;\n    }\n  }\n\n  handleEvent(event) {\n    // Ignore if focused on text input\n    const targetElement = event.target || event.srcElement;\n    if (\n      (targetElement.tagName === 'INPUT' && targetElement.type === 'text') ||\n      targetElement.tagName === 'TEXTAREA'\n    ) {\n      return;\n    }\n\n    if (this.enableDownEvent && event.type === 'keydown') {\n      this.callback({\n        type: DOWN_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n\n    if (this.enableUpEvent && event.type === 'keyup') {\n      this.callback({\n        type: UP_EVENT_TYPE,\n        srcEvent: event,\n        key: event.key,\n        target: event.target\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}