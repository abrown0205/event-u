{"ast":null,"code":"import { Manager } from './utils/hammer';\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\nimport EventRegistrar from './utils/event-registrar';\nimport { BASIC_EVENT_ALIASES, EVENT_RECOGNIZER_MAP, GESTURE_EVENT_ALIASES, RECOGNIZERS, RECOGNIZER_COMPATIBLE_MAP, RECOGNIZER_FALLBACK_MAP } from './constants';\nconst DEFAULT_OPTIONS = {\n  events: null,\n  recognizers: null,\n  recognizerOptions: {},\n  Manager,\n  touchAction: 'none',\n  tabIndex: 0\n};\nexport default class EventManager {\n  constructor(element = null, options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.events = new Map();\n    this._onBasicInput = this._onBasicInput.bind(this);\n    this._onOtherEvent = this._onOtherEvent.bind(this);\n    this.setElement(element);\n    const {\n      events\n    } = options;\n\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  setElement(element) {\n    if (this.element) {\n      this.destroy();\n    }\n\n    this.element = element;\n\n    if (!element) {\n      return;\n    }\n\n    const {\n      options\n    } = this;\n    const ManagerClass = options.Manager;\n    this.manager = new ManagerClass(element, {\n      touchAction: options.touchAction,\n      recognizers: options.recognizers || RECOGNIZERS\n    }).on('hammer.input', this._onBasicInput);\n\n    if (!options.recognizers) {\n      Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(name => {\n        const recognizer = this.manager.get(name);\n\n        if (recognizer) {\n          RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {\n            recognizer.recognizeWith(otherName);\n          });\n        }\n      });\n    }\n\n    for (const recognizerName in options.recognizerOptions) {\n      const recognizer = this.manager.get(recognizerName);\n\n      if (recognizer) {\n        const recognizerOption = options.recognizerOptions[recognizerName];\n        delete recognizerOption.enable;\n        recognizer.set(recognizerOption);\n      }\n    }\n\n    this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.moveInput = new MoveInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.keyInput = new KeyInput(element, this._onOtherEvent, {\n      enable: false,\n      tabIndex: options.tabIndex\n    });\n    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n      enable: false\n    });\n\n    for (const [eventAlias, eventRegistrar] of this.events) {\n      if (!eventRegistrar.isEmpty()) {\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n\n        this.manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n  }\n\n  destroy() {\n    if (this.element) {\n      this.wheelInput.destroy();\n      this.moveInput.destroy();\n      this.keyInput.destroy();\n      this.contextmenuInput.destroy();\n      this.manager.destroy();\n      this.wheelInput = null;\n      this.moveInput = null;\n      this.keyInput = null;\n      this.contextmenuInput = null;\n      this.manager = null;\n      this.element = null;\n    }\n  }\n\n  on(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false);\n  }\n\n  once(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, true);\n  }\n\n  watch(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false, true);\n  }\n\n  off(event, handler) {\n    this._removeEventHandler(event, handler);\n  }\n\n  _toggleRecognizer(name, enabled) {\n    const {\n      manager\n    } = this;\n\n    if (!manager) {\n      return;\n    }\n\n    const recognizer = manager.get(name);\n\n    if (recognizer && recognizer.options.enable !== enabled) {\n      recognizer.set({\n        enable: enabled\n      });\n      const fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n\n      if (fallbackRecognizers && !this.options.recognizers) {\n        fallbackRecognizers.forEach(otherName => {\n          const otherRecognizer = manager.get(otherName);\n\n          if (enabled) {\n            otherRecognizer.requireFailure(name);\n            recognizer.dropRequireFailure(otherName);\n          } else {\n            otherRecognizer.dropRequireFailure(name);\n          }\n        });\n      }\n    }\n\n    this.wheelInput.enableEventType(name, enabled);\n    this.moveInput.enableEventType(name, enabled);\n    this.keyInput.enableEventType(name, enabled);\n    this.contextmenuInput.enableEventType(name, enabled);\n  }\n\n  _addEventHandler(event, handler, opts, once, passive) {\n    if (typeof event !== 'string') {\n      opts = handler;\n\n      for (const eventName in event) {\n        this._addEventHandler(eventName, event[eventName], opts, once, passive);\n      }\n\n      return;\n    }\n\n    const {\n      manager,\n      events\n    } = this;\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n    let eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      eventRegistrar = new EventRegistrar(this);\n      events.set(eventAlias, eventRegistrar);\n      eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias;\n\n      if (manager) {\n        manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n\n    eventRegistrar.add(event, handler, opts, once, passive);\n\n    if (!eventRegistrar.isEmpty()) {\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n    }\n  }\n\n  _removeEventHandler(event, handler) {\n    if (typeof event !== 'string') {\n      for (const eventName in event) {\n        this._removeEventHandler(eventName, event[eventName]);\n      }\n\n      return;\n    }\n\n    const {\n      events\n    } = this;\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n    const eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      return;\n    }\n\n    eventRegistrar.remove(event, handler);\n\n    if (eventRegistrar.isEmpty()) {\n      const {\n        recognizerName\n      } = eventRegistrar;\n      let isRecognizerUsed = false;\n\n      for (const eh of events.values()) {\n        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n          isRecognizerUsed = true;\n          break;\n        }\n      }\n\n      if (!isRecognizerUsed) {\n        this._toggleRecognizer(recognizerName, false);\n      }\n    }\n  }\n\n  _onBasicInput(event) {\n    const {\n      srcEvent\n    } = event;\n    const alias = BASIC_EVENT_ALIASES[srcEvent.type];\n\n    if (alias) {\n      this.manager.emit(alias, event);\n    }\n  }\n\n  _onOtherEvent(event) {\n    this.manager.emit(event.type, event);\n  }\n\n}","map":{"version":3,"sources":["../../src/event-manager.js"],"names":["DEFAULT_OPTIONS","events","recognizers","recognizerOptions","touchAction","tabIndex","constructor","element","options","Object","setElement","ManagerClass","RECOGNIZERS","name","recognizer","RECOGNIZER_COMPATIBLE_MAP","otherName","recognizerOption","enable","eventRegistrar","destroy","on","once","watch","off","_toggleRecognizer","manager","enabled","fallbackRecognizers","RECOGNIZER_FALLBACK_MAP","otherRecognizer","_addEventHandler","opts","event","eventAlias","GESTURE_EVENT_ALIASES","EVENT_RECOGNIZER_MAP","_removeEventHandler","recognizerName","isRecognizerUsed","eh","_onBasicInput","srcEvent","alias","BASIC_EVENT_ALIASES","_onOtherEvent"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Manager} from './utils/hammer';\n\nimport WheelInput from './inputs/wheel-input';\nimport MoveInput from './inputs/move-input';\nimport KeyInput from './inputs/key-input';\nimport ContextmenuInput from './inputs/contextmenu-input';\n\nimport EventRegistrar from './utils/event-registrar';\n\nimport {\n  BASIC_EVENT_ALIASES,\n  EVENT_RECOGNIZER_MAP,\n  GESTURE_EVENT_ALIASES,\n  RECOGNIZERS,\n  RECOGNIZER_COMPATIBLE_MAP,\n  RECOGNIZER_FALLBACK_MAP\n} from './constants';\n\nconst DEFAULT_OPTIONS = {\n  // event handlers\n  events: null,\n  // custom recognizers\n  recognizers: null,\n  recognizerOptions: {},\n  // Manager class\n  Manager,\n  // allow browser default touch action\n  // https://github.com/uber/react-map-gl/issues/506\n  touchAction: 'none',\n  tabIndex: 0\n};\n\n// Unified API for subscribing to events about both\n// basic input events (e.g. 'mousemove', 'touchstart', 'wheel')\n// and gestural input (e.g. 'click', 'tap', 'panstart').\n// Delegates gesture related event registration and handling to Hammer.js.\nexport default class EventManager {\n  constructor(element = null, options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.events = new Map();\n\n    this._onBasicInput = this._onBasicInput.bind(this);\n    this._onOtherEvent = this._onOtherEvent.bind(this);\n\n    this.setElement(element);\n\n    // Register all passed events.\n    const {events} = options;\n    if (events) {\n      this.on(events);\n    }\n  }\n\n  setElement(element) {\n    if (this.element) {\n      // unregister all events\n      this.destroy();\n    }\n    this.element = element;\n    if (!element) {\n      return;\n    }\n\n    const {options} = this;\n    const ManagerClass = options.Manager;\n\n    this.manager = new ManagerClass(element, {\n      touchAction: options.touchAction,\n      recognizers: options.recognizers || RECOGNIZERS\n    }).on('hammer.input', this._onBasicInput);\n\n    if (!options.recognizers) {\n      // Set default recognize withs\n      // http://hammerjs.github.io/recognize-with/\n      Object.keys(RECOGNIZER_COMPATIBLE_MAP).forEach(name => {\n        const recognizer = this.manager.get(name);\n        if (recognizer) {\n          RECOGNIZER_COMPATIBLE_MAP[name].forEach(otherName => {\n            recognizer.recognizeWith(otherName);\n          });\n        }\n      });\n    }\n\n    // Set recognizer options\n    for (const recognizerName in options.recognizerOptions) {\n      const recognizer = this.manager.get(recognizerName);\n      if (recognizer) {\n        const recognizerOption = options.recognizerOptions[recognizerName];\n        // `enable` is managed by the event registrations\n        delete recognizerOption.enable;\n        recognizer.set(recognizerOption);\n      }\n    }\n\n    // Handle events not handled by Hammer.js:\n    // - mouse wheel\n    // - pointer/touch/mouse move\n    this.wheelInput = new WheelInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.moveInput = new MoveInput(element, this._onOtherEvent, {\n      enable: false\n    });\n    this.keyInput = new KeyInput(element, this._onOtherEvent, {\n      enable: false,\n      tabIndex: options.tabIndex\n    });\n    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {\n      enable: false\n    });\n\n    // Register all existing events\n    for (const [eventAlias, eventRegistrar] of this.events) {\n      if (!eventRegistrar.isEmpty()) {\n        // Enable recognizer for this event.\n        this._toggleRecognizer(eventRegistrar.recognizerName, true);\n        this.manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n  }\n\n  // Tear down internal event management implementations.\n  destroy() {\n    if (this.element) {\n      // wheelInput etc. are created in setElement() and therefore\n      // cannot exist if there is no element\n      this.wheelInput.destroy();\n      this.moveInput.destroy();\n      this.keyInput.destroy();\n      this.contextmenuInput.destroy();\n      this.manager.destroy();\n\n      this.wheelInput = null;\n      this.moveInput = null;\n      this.keyInput = null;\n      this.contextmenuInput = null;\n      this.manager = null;\n      this.element = null;\n    }\n  }\n\n  // Register an event handler function to be called on `event`.\n  on(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false);\n  }\n\n  // Register an event handler function to be called on `event`, then remove it\n  once(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, true);\n  }\n\n  // Register an event handler function to be called on `event`\n  // This handler does not ask the event to be recognized at all times.\n  // Instead, it only \"intercepts\" the event if some other handler is getting it.\n  watch(event, handler, opts) {\n    this._addEventHandler(event, handler, opts, false, true);\n  }\n\n  /**\n   * Deregister a previously-registered event handler.\n   * @param {string|Object} event   An event name (String) or map of event names to handlers\n   * @param {Function} [handler]    The function to be called on `event`.\n   */\n  off(event, handler) {\n    this._removeEventHandler(event, handler);\n  }\n\n  /*\n   * Enable/disable recognizer for the given event\n   */\n  _toggleRecognizer(name, enabled) {\n    const {manager} = this;\n    if (!manager) {\n      return;\n    }\n    const recognizer = manager.get(name);\n    if (recognizer && recognizer.options.enable !== enabled) {\n      recognizer.set({enable: enabled});\n\n      const fallbackRecognizers = RECOGNIZER_FALLBACK_MAP[name];\n      if (fallbackRecognizers && !this.options.recognizers) {\n        // Set default require failures\n        // http://hammerjs.github.io/require-failure/\n        fallbackRecognizers.forEach(otherName => {\n          const otherRecognizer = manager.get(otherName);\n          if (enabled) {\n            // Wait for this recognizer to fail\n            otherRecognizer.requireFailure(name);\n            /**\n             * This seems to be a bug in hammerjs:\n             * requireFailure() adds both ways\n             * dropRequireFailure() only drops one way\n             * https://github.com/hammerjs/hammer.js/blob/master/src/recognizerjs/\n               recognizer-constructor.js#L136\n             */\n            recognizer.dropRequireFailure(otherName);\n          } else {\n            // Do not wait for this recognizer to fail\n            otherRecognizer.dropRequireFailure(name);\n          }\n        });\n      }\n    }\n    this.wheelInput.enableEventType(name, enabled);\n    this.moveInput.enableEventType(name, enabled);\n    this.keyInput.enableEventType(name, enabled);\n    this.contextmenuInput.enableEventType(name, enabled);\n  }\n\n  /**\n   * Process the event registration for a single event + handler.\n   */\n  _addEventHandler(event, handler, opts, once, passive) {\n    if (typeof event !== 'string') {\n      opts = handler;\n      // If `event` is a map, call `on()` for each entry.\n      for (const eventName in event) {\n        this._addEventHandler(eventName, event[eventName], opts, once, passive);\n      }\n      return;\n    }\n\n    const {manager, events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    let eventRegistrar = events.get(eventAlias);\n    if (!eventRegistrar) {\n      eventRegistrar = new EventRegistrar(this);\n      events.set(eventAlias, eventRegistrar);\n      // Enable recognizer for this event.\n      eventRegistrar.recognizerName = EVENT_RECOGNIZER_MAP[eventAlias] || eventAlias;\n      // Listen to the event\n      if (manager) {\n        manager.on(eventAlias, eventRegistrar.handleEvent);\n      }\n    }\n    eventRegistrar.add(event, handler, opts, once, passive);\n    if (!eventRegistrar.isEmpty()) {\n      this._toggleRecognizer(eventRegistrar.recognizerName, true);\n    }\n  }\n\n  /**\n   * Process the event deregistration for a single event + handler.\n   */\n  _removeEventHandler(event, handler) {\n    if (typeof event !== 'string') {\n      // If `event` is a map, call `off()` for each entry.\n      for (const eventName in event) {\n        this._removeEventHandler(eventName, event[eventName]);\n      }\n      return;\n    }\n\n    const {events} = this;\n    // Alias to a recognized gesture as necessary.\n    const eventAlias = GESTURE_EVENT_ALIASES[event] || event;\n\n    const eventRegistrar = events.get(eventAlias);\n\n    if (!eventRegistrar) {\n      return;\n    }\n\n    eventRegistrar.remove(event, handler);\n\n    if (eventRegistrar.isEmpty()) {\n      const {recognizerName} = eventRegistrar;\n      // Disable recognizer if no more handlers are attached to its events\n      let isRecognizerUsed = false;\n      for (const eh of events.values()) {\n        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {\n          isRecognizerUsed = true;\n          break;\n        }\n      }\n      if (!isRecognizerUsed) {\n        this._toggleRecognizer(recognizerName, false);\n      }\n    }\n  }\n\n  /**\n   * Handle basic events using the 'hammer.input' Hammer.js API:\n   * Before running Recognizers, Hammer emits a 'hammer.input' event\n   * with the basic event info. This function emits all basic events\n   * aliased to the \"class\" of event received.\n   * See constants.BASIC_EVENT_CLASSES basic event class definitions.\n   */\n  _onBasicInput(event) {\n    const {srcEvent} = event;\n    const alias = BASIC_EVENT_ALIASES[srcEvent.type];\n    if (alias) {\n      // fire all events aliased to srcEvent.type\n      this.manager.emit(alias, event);\n    }\n  }\n\n  /**\n   * Handle events not supported by Hammer.js,\n   * and pipe back out through same (Hammer) channel used by other events.\n   */\n  _onOtherEvent(event) {\n    // console.log('onotherevent', event.type, event)\n    this.manager.emit(event.type, event);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}